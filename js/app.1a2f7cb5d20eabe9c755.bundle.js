(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,s)=>{const r=s(89),{lightningChart:a,PalettedFill:o,LUT:n,emptyFill:i,emptyLine:l,AxisScrollStrategies:c,LegendBoxBuilders:u,synchronizeAxisIntervals:d,regularColorSteps:g,Themes:x}=r,{createSpectrumDataGenerator:p}=s(863),h=1024,m=a().Dashboard({numberOfColumns:2,numberOfRows:2}).setColumnWidth(0,1).setColumnWidth(1,.2).setRowHeight(0,1).setRowHeight(1,.3),S=m.createChartXY({columnIndex:0,rowIndex:0}).setTitle("2D Spectrogram with X & Y projection on mouse hover"),f=m.getTheme(),y=S.addHeatmapGridSeries({columns:h,rows:1024}).setMouseInteractions(!1).setWireframeStyle(l).setFillStyle(new o({lookUpProperty:"value",lut:new n({interpolate:!0,steps:g(0,1,f.examples.spectrogramColorPalette)})})),A=(S.addLegendBox(u.HorizontalLegendBox).setAutoDispose({type:"max-width",maxWidth:.8}).add(S),m.createChartXY({columnIndex:1,rowIndex:0}).setTitleFillStyle(i).setPadding({top:44}).setMouseInteractions(!1));A.getDefaultAxisY().setScrollStrategy(void 0).setMouseInteractions(!1),d(S.getDefaultAxisY(),A.getDefaultAxisY()),A.getDefaultAxisX().setScrollStrategy(c.expansion).setInterval({start:0,end:1,stopAxisAfter:!1}).setMouseInteractions(!1);const I=A.addLineSeries({dataPattern:{pattern:"ProgressiveY",regularProgressiveStep:!0}}).setName("Projection (Y)").setCursorSolveBasis("nearest-y"),D=m.createChartXY({columnIndex:0,rowIndex:1}).setTitleFillStyle(i).setMouseInteractions(!1);D.getDefaultAxisX().setScrollStrategy(void 0).setMouseInteractions(!1),d(S.getDefaultAxisX(),D.getDefaultAxisX()),D.getDefaultAxisY().setScrollStrategy(c.expansion).setInterval({start:0,end:1,stopAxisAfter:!1}).setMouseInteractions(!1);const v=D.addLineSeries({dataPattern:{pattern:"ProgressiveX",regularProgressiveStep:!0}}).setName("Projection (X)");S.getDefaultAxisY().setThickness(50),D.getDefaultAxisY().setThickness(50),S.getDefaultAxisX().setThickness(25),A.getDefaultAxisX().setThickness(25),p().setNumberOfSamples(h).setSampleSize(1024).generate().toPromise().then((e=>{y.invalidateIntensityValues(e);const t=(t,s)=>{let r,a;try{r=e[Math.round(t)].map(((e,t)=>({x:e,y:t})))}catch(e){}try{a=[];const t=Math.round(s);for(let s=0;s<h;s+=1)a[s]={x:s,y:e[s][t]}}catch(e){}I.clear(),r&&I.add(r),v.clear(),a&&v.add(a)};S.onSeriesBackgroundMouseMove(((e,s)=>{const r=S.translateCoordinate(s,S.coordsAxis);t(r.x,r.y)})),t(512,512)}))}},e=>{e.O(0,[502],(()=>(44,e(e.s=44)))),e.O()}]);