(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,s)=>{const a=s(377),{lightningChart:r,PalettedFill:o,LUT:n,emptyFill:i,emptyLine:l,AxisScrollStrategies:c,LegendBoxBuilders:d,synchronizeAxisIntervals:u,regularColorSteps:g,Themes:h}=a,{createSpectrumDataGenerator:m}=s(613),x=1024,p=r({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).Dashboard({theme:h[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0,numberOfColumns:2,numberOfRows:2}).setColumnWidth(0,1).setColumnWidth(1,.2).setRowHeight(0,1).setRowHeight(1,.3),S=p.createChartXY({columnIndex:0,rowIndex:0}).setTitle("2D Spectrogram with X & Y projection on mouse hover"),f=p.getTheme(),A=S.addHeatmapGridSeries({columns:x,rows:1024}).setMouseInteractions(!1).setWireframeStyle(l).setFillStyle(new o({lookUpProperty:"value",lut:new n({interpolate:!0,steps:g(0,1,f.examples.spectrogramColorPalette)})})),y=(S.addLegendBox(d.HorizontalLegendBox).setAutoDispose({type:"max-width",maxWidth:.8}).add(S),p.createChartXY({columnIndex:1,rowIndex:0}).setTitleFillStyle(i).setPadding({top:44}).setMouseInteractions(!1));y.getDefaultAxisY().setScrollStrategy(void 0).setMouseInteractions(!1),u(S.getDefaultAxisY(),y.getDefaultAxisY()),y.getDefaultAxisX().setScrollStrategy(c.expansion).setInterval({start:0,end:1,stopAxisAfter:!1}).setMouseInteractions(!1);const I=y.addLineSeries({dataPattern:{pattern:"ProgressiveY",regularProgressiveStep:!0}}).setName("Projection (Y)"),w=p.createChartXY({columnIndex:0,rowIndex:1}).setTitleFillStyle(i).setMouseInteractions(!1);w.getDefaultAxisX().setScrollStrategy(void 0).setMouseInteractions(!1),u(S.getDefaultAxisX(),w.getDefaultAxisX()),w.getDefaultAxisY().setScrollStrategy(c.expansion).setInterval({start:0,end:1,stopAxisAfter:!1}).setMouseInteractions(!1);const D=w.addLineSeries({dataPattern:{pattern:"ProgressiveX",regularProgressiveStep:!0}}).setName("Projection (X)");S.getDefaultAxisY().setThickness(50),w.getDefaultAxisY().setThickness(50),S.getDefaultAxisX().setThickness(25),y.getDefaultAxisX().setThickness(25),m().setNumberOfSamples(x).setSampleSize(1024).generate().toPromise().then((e=>{A.invalidateIntensityValues(e);const t=(t,s)=>{let a,r;try{a=e[Math.round(t)].map(((e,t)=>({x:e,y:t})))}catch(e){}try{r=[];const t=Math.round(s);for(let s=0;s<x;s+=1)r[s]={x:s,y:e[s][t]}}catch(e){}I.clear(),a&&I.add(a),D.clear(),r&&D.add(r)};S.onSeriesBackgroundMouseMove(((e,s)=>{const a=S.translateCoordinate(s,S.coordsAxis);t(a.x,a.y)})),t(512,512)}))}},e=>{e.O(0,[502],(()=>e(e.s=44))),e.O()}]);