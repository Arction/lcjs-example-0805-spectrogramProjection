(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,s)=>{const a=s(475),{lightningChart:r,PalettedFill:n,LUT:o,emptyFill:i,emptyLine:l,AxisScrollStrategies:c,LegendBoxBuilders:u,translatePoint:d,synchronizeAxisIntervals:g,regularColorSteps:x,Themes:p}=a,{createSpectrumDataGenerator:h}=s(27),m=1024,S=r().Dashboard({numberOfColumns:2,numberOfRows:2}).setColumnWidth(0,1).setColumnWidth(1,.2).setRowHeight(0,1).setRowHeight(1,.3),f=S.createChartXY({columnIndex:0,rowIndex:0}).setTitle("2D Spectrogram with X & Y projection on mouse hover"),y=S.getTheme(),A=f.addHeatmapGridSeries({columns:m,rows:1024}).setMouseInteractions(!1).setWireframeStyle(l).setFillStyle(new n({lookUpProperty:"value",lut:new o({interpolate:!0,steps:x(0,1,y.examples.spectrogramColorPalette)})})),I=(f.addLegendBox(u.HorizontalLegendBox).setAutoDispose({type:"max-width",maxWidth:.8}).add(f),S.createChartXY({columnIndex:1,rowIndex:0}).setTitleFillStyle(i).setPadding({top:44}).setMouseInteractions(!1));I.getDefaultAxisY().setScrollStrategy(void 0).setMouseInteractions(!1),g(f.getDefaultAxisY(),I.getDefaultAxisY()),I.getDefaultAxisX().setScrollStrategy(c.expansion).setInterval({start:0,end:1,stopAxisAfter:!1}).setMouseInteractions(!1);const D=I.addLineSeries({dataPattern:{pattern:"ProgressiveY",regularProgressiveStep:!0}}).setName("Projection (Y)").setCursorSolveBasis("nearest-y"),v=S.createChartXY({columnIndex:0,rowIndex:1}).setTitleFillStyle(i).setMouseInteractions(!1);v.getDefaultAxisX().setScrollStrategy(void 0).setMouseInteractions(!1),g(f.getDefaultAxisX(),v.getDefaultAxisX()),v.getDefaultAxisY().setScrollStrategy(c.expansion).setInterval({start:0,end:1,stopAxisAfter:!1}).setMouseInteractions(!1);const P=v.addLineSeries({dataPattern:{pattern:"ProgressiveX",regularProgressiveStep:!0}}).setName("Projection (X)");f.getDefaultAxisY().setThickness(50),v.getDefaultAxisY().setThickness(50),f.getDefaultAxisX().setThickness(25),I.getDefaultAxisX().setThickness(25),h().setNumberOfSamples(m).setSampleSize(1024).generate().toPromise().then((e=>{A.invalidateIntensityValues(e);const t=(t,s)=>{let a,r;try{a=e[Math.round(t)].map(((e,t)=>({x:e,y:t})))}catch(e){}try{r=[];const t=Math.round(s);for(let s=0;s<m;s+=1)r[s]={x:s,y:e[s][t]}}catch(e){}D.clear(),a&&D.add(a),P.clear(),r&&P.add(r)};f.onSeriesBackgroundMouseMove(((e,s)=>{const a=d(f.engine.clientLocation2Engine(s.clientX,s.clientY),f.engine.scale,A.scale);t(a.x,a.y)})),t(512,512)}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);