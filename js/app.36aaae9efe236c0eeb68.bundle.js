(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,s)=>{const a=s(809),{lightningChart:l,PalettedFill:o,LUT:n,emptyFill:r,emptyLine:i,AxisScrollStrategies:c,LegendBoxBuilders:u,ColorHSV:d,translatePoint:g,synchronizeAxisIntervals:x,Themes:h}=a,{createSpectrumDataGenerator:m}=s(27),S=1024,p=l().Dashboard({numberOfColumns:2,numberOfRows:2,disableAnimations:!0}).setColumnWidth(0,1).setColumnWidth(1,.2).setRowHeight(0,1).setRowHeight(1,.3),v=p.createChartXY({columnIndex:0,rowIndex:0}).setTitle("2D Spectrogram with X & Y projection on mouse hover"),y=v.addHeatmapGridSeries({columns:S,rows:1024}).setMouseInteractions(!1).setWireframeStyle(i).setFillStyle(new o({lookUpProperty:"value",lut:new n({interpolate:!0,steps:[{value:0,label:"0.0",color:d(0,1,0)},{value:.2,label:"0.2",color:d(270,.84,.2)},{value:.4,label:"0.4",color:d(289,.86,.35)},{value:.6,label:"0.6",color:d(324,.97,.56)},{value:.8,label:"0.8",color:d(1,1,1)},{value:1,label:"1.0",color:d(44,.64,1)}]})})),f=(v.addLegendBox(u.HorizontalLegendBox).setAutoDispose({type:"max-width",maxWidth:.8}).add(v),p.createChartXY({columnIndex:1,rowIndex:0}).setTitleFillStyle(r).setPadding({top:44}).setMouseInteractions(!1));f.getDefaultAxisY().setScrollStrategy(void 0).setMouseInteractions(!1),x(v.getDefaultAxisY(),f.getDefaultAxisY()),f.getDefaultAxisX().setScrollStrategy(c.expansion).setInterval(0,1).setMouseInteractions(!1);const I=f.addLineSeries({dataPattern:{pattern:"ProgressiveY",regularProgressiveStep:!0}}).setName("Projection (Y)").setCursorSolveBasis("nearest-y"),A=p.createChartXY({columnIndex:0,rowIndex:1}).setTitleFillStyle(r).setMouseInteractions(!1);A.getDefaultAxisX().setScrollStrategy(void 0).setMouseInteractions(!1),x(v.getDefaultAxisX(),A.getDefaultAxisX()),A.getDefaultAxisY().setScrollStrategy(c.expansion).setInterval(0,1).setMouseInteractions(!1);const D=A.addLineSeries({dataPattern:{pattern:"ProgressiveX",regularProgressiveStep:!0}}).setName("Projection (X)");v.getDefaultAxisY().setThickness(50),A.getDefaultAxisY().setThickness(50),v.getDefaultAxisX().setThickness(25),f.getDefaultAxisX().setThickness(25),m().setNumberOfSamples(S).setSampleSize(1024).generate().toPromise().then((e=>{y.invalidateIntensityValues(e),console.log(y),v.onSeriesBackgroundMouseMove(((t,s)=>{const a=g(v.engine.clientLocation2Engine(s.clientX,s.clientY),v.engine.scale,y.scale);let l,o;try{l=e[Math.round(a.x)].map(((e,t)=>({x:e,y:t})))}catch(e){}try{o=[];const t=Math.round(a.y);for(let s=0;s<S;s+=1)o[s]={x:s,y:e[s][t]}}catch(e){}I.clear(),l&&I.add(l),D.clear(),o&&D.add(o)}))}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);