(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,s)=>{const a=s(377),{lightningChart:r,PalettedFill:o,LUT:n,emptyFill:i,emptyLine:l,AxisScrollStrategies:d,LegendBoxBuilders:c,synchronizeAxisIntervals:u,regularColorSteps:h,Themes:m}=a,{createSpectrumDataGenerator:g}=s(613),x=1024,p=r({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).Dashboard({theme:m[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0,numberOfColumns:2,numberOfRows:2}).setColumnWidth(0,1).setColumnWidth(1,.2).setRowHeight(0,1).setRowHeight(1,.3),S=p.createChartXY({columnIndex:0,rowIndex:0}).setTitle("2D Spectrogram with X & Y projection on mouse hover"),A=p.getTheme(),f=S.addHeatmapGridSeries({columns:x,rows:1024}).setPointerEvents(!1).setWireframeStyle(l).setFillStyle(new o({lookUpProperty:"value",lut:new n({interpolate:!0,steps:h(0,1,A.examples.spectrogramColorPalette)})})),y=(S.addLegendBox(c.HorizontalLegendBox).setAutoDispose({type:"max-width",maxWidth:.8}).add(S),p.createChartXY({columnIndex:1,rowIndex:0}).setTitleFillStyle(i).setPadding({top:44}).setUserInteractions(void 0));y.getDefaultAxisY().setScrollStrategy(void 0),u(S.getDefaultAxisY(),y.getDefaultAxisY()),y.getDefaultAxisX().setScrollStrategy(d.expansion).setInterval({start:0,end:1,stopAxisAfter:!1});const w=y.addPointLineAreaSeries({dataPattern:"ProgressiveY"}).setName("Projection (Y)").setAreaFillStyle(i),v=p.createChartXY({columnIndex:0,rowIndex:1}).setTitleFillStyle(i).setUserInteractions(void 0);v.getDefaultAxisX().setScrollStrategy(void 0),u(S.getDefaultAxisX(),v.getDefaultAxisX()),v.getDefaultAxisY().setScrollStrategy(d.expansion).setInterval({start:0,end:1,stopAxisAfter:!1});const D=v.addPointLineAreaSeries({dataPattern:"ProgressiveX"}).setName("Projection (X)").setAreaFillStyle(i);S.getDefaultAxisY().setThickness(50),v.getDefaultAxisY().setThickness(50),S.getDefaultAxisX().setThickness(25),y.getDefaultAxisX().setThickness(25),g().setNumberOfSamples(x).setSampleSize(1024).generate().toPromise().then((e=>{f.invalidateIntensityValues(e);const t=(t,s)=>{let a,r;try{a=e[Math.round(t)].map(((e,t)=>({x:e,y:t})))}catch(e){}try{r=[];const t=Math.round(s);for(let s=0;s<x;s+=1)r[s]={x:s,y:e[s][t]}}catch(e){}w.clear(),a&&w.add(a),D.clear(),r&&D.add(r)};S.seriesBackground.addEventListener("pointermove",(e=>{const s=S.translateCoordinate(e,S.coordsAxis);t(s.x,s.y)})),t(512,512)}))}},e=>{e.O(0,[502],(()=>e(e.s=44))),e.O()}]);